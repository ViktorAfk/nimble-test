(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[67066,39519],{813391:function(n,s,a){"use strict";a.r(s),a.d(s,{boxClasses:function(){return t.Z},default:function(){return e.Z}});var e=a(545610),t=a(917952)},351844:function(n,s,a){"use strict";a.r(s),a.d(s,{buttonClasses:function(){return t.Z},default:function(){return e.Z},getButtonUtilityClass:function(){return t.F}});var e=a(658360),t=a(651854)},348855:function(n,s,a){"use strict";a.r(s),a.d(s,{SliderMark:function(){return e.jz},SliderMarkLabel:function(){return e.J$},SliderRail:function(){return e._U},SliderRoot:function(){return e.l7},SliderThumb:function(){return e.gs},SliderTrack:function(){return e.Uj},SliderValueLabel:function(){return e.Kq},default:function(){return e.ZP},getSliderUtilityClass:function(){return t.k},sliderClasses:function(){return t.Z}});var e=a(76268),t=a(271248)},133134:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return e.Z},getTooltipUtilityClass:function(){return t.Q},tooltipClasses:function(){return t.Z}});var e=a(557058),t=a(545718)},324113:function(n,s,a){"use strict";a.d(s,{CM:function(){return k},JO:function(){return y},tv:function(){return m}});var e=a(41732),t=a(977928),o=a(183750),p=a(546068),c=a(383312),l=a(570653),i=a(366671);a(192379),a(200651);var r={attribute:"data-mui-color-scheme",colorSchemeStorageKey:"mui-color-scheme",defaultLightColorScheme:"light",defaultDarkColorScheme:"dark",modeStorageKey:"mui-mode"},u=(0,p.Z)(),d=(0,t.Z)({themeId:i.Z,theme:u,attribute:r.attribute,colorSchemeStorageKey:r.colorSchemeStorageKey,modeStorageKey:r.modeStorageKey,defaultColorScheme:{light:r.defaultLightColorScheme,dark:r.defaultDarkColorScheme},resolveTheme:function(n){var s=(0,e.Z)((0,e.Z)({},n),{},{typography:(0,c.Z)(n.palette,n.typography)});return s.unstable_sx=function(n){return(0,o.Z)({sx:n,theme:this})},s},excludeVariablesFromRoot:l.Z}),k=d.CssVarsProvider,m=d.useColorScheme,y=d.getInitColorSchemeScript},524956:function(n,s,a){"use strict";a.r(s),a.d(s,{alignProperty:function(){return r},convertLength:function(){return i},fontGrid:function(){return u},getUnit:function(){return c},isUnitless:function(){return p},responsiveProperty:function(){return d},toUnitless:function(){return l}});var e=a(974468),t=a(393356),o=a.n(t);function p(n){return String(o()(n)).length===String(n).length}function c(n){return String(n).match(/[\d.\-+]*\s*(.*)/)[1]||""}function l(n){return o()(n)}function i(n){return function(s,a){var e=c(s);if(e===a)return s;var t=l(s);"px"!==e&&("em"===e?t=l(s)*l(n):"rem"===e&&(t=l(s)*l(n)));var p=t;if("px"!==a){if("em"===a)p=t/l(n);else{if("rem"!==a)return s;p=t/l(n)}}return o()(p.toFixed(5))+a}}function r(n){var s=n.size,a=n.grid,e=s-s%a,t=e+a;return s-e<t-s?e:t}function u(n){var s=n.lineHeight;return n.pixels/(s*n.htmlFontSize)}function d(n){var s=n.cssProperty,a=n.min,t=n.max,o=n.unit,p=void 0===o?"rem":o,c=n.breakpoints,l=void 0===c?[600,900,1200]:c,i=n.transform,r=void 0===i?null:i,u=(0,e.Z)({},s,"".concat(a).concat(p)),d=(t-a)/l[l.length-1];return l.forEach(function(n){var t=a+d*n;null!==r&&(t=r(t)),u["@media (min-width:".concat(n,"px)")]=(0,e.Z)({},s,"".concat(Math.round(1e4*t)/1e4).concat(p))}),u}},570653:function(n,s,a){"use strict";var e=a(362493);s.Z=function(n){return[].concat((0,e.Z)((0,e.Z)(Array(24)).map(function(s,a){return"--".concat(n?"".concat(n,"-"):"","overlays-").concat(a+1)})),["--".concat(n?"".concat(n,"-"):"","palette-AppBar-darkBg"),"--".concat(n?"".concat(n,"-"):"","palette-AppBar-darkColor")])}},546068:function(n,s,a){"use strict";a.d(s,{Z:function(){return M}});var e=a(41732),t=a(532534),o=a(362493),p=a(512815),c=a.n(p),l=a(288569),i=a(808898),r=a(261504),u=a(132089),d=a(183750),k=a(71468),m=a(90730),y=a(239434),h=a(942720),g=["colorSchemes","cssVarPrefix","shouldSkipGeneratingVar"],f=["palette"],v=(0,o.Z)(Array(25)).map(function(n,s){if(0!==s){var a=(0,h.Z)(s);return"linear-gradient(rgba(255 255 255 / ".concat(a,"), rgba(255 255 255 / ").concat(a,"))")}});function C(n,s,a){!n[s]&&a&&(n[s]=a)}function b(n){return n&&n.startsWith("hsl")?(0,k.ve)(n):n}function x(n,s){"".concat(s,"Channel") in n||(n["".concat(s,"Channel")]=(0,k.LR)(b(n[s]),"MUI: Can't create `palette.".concat(s,"Channel` because `palette.").concat(s,"` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().")+"\n"+"To suppress this warning, you need to explicitly provide the `palette.".concat(s,'Channel` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.')))}var w=function(n){try{return n()}catch(n){}},S=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"mui";return(0,i.Z)(n)};function M(){var n,s,a,o,p,i,h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},M=h.colorSchemes,j=void 0===M?{}:M,T=h.cssVarPrefix,P=void 0===T?"mui":T,B=h.shouldSkipGeneratingVar,I=void 0===B?m.Z:B,Z=(0,t.Z)(h,g),R=S(P),A=(0,y.Z)((0,e.Z)((0,e.Z)({},Z),j.light&&{palette:null===(n=j.light)||void 0===n?void 0:n.palette})),E=A.palette,V=(0,t.Z)(A,f),D=(0,y.Z)({palette:(0,e.Z)({mode:"dark"},null===(s=j.dark)||void 0===s?void 0:s.palette)}).palette,U=(0,e.Z)((0,e.Z)({},V),{},{cssVarPrefix:P,getCssVar:R,colorSchemes:(0,e.Z)((0,e.Z)({},j),{},{light:(0,e.Z)((0,e.Z)({},j.light),{},{palette:E,opacity:(0,e.Z)({inputPlaceholder:.42,inputUnderline:.42,switchTrackDisabled:.12,switchTrack:.38},null===(a=j.light)||void 0===a?void 0:a.opacity),overlays:(null===(o=j.light)||void 0===o?void 0:o.overlays)||[]}),dark:(0,e.Z)((0,e.Z)({},j.dark),{},{palette:D,opacity:(0,e.Z)({inputPlaceholder:.5,inputUnderline:.7,switchTrackDisabled:.2,switchTrack:.3},null===(p=j.dark)||void 0===p?void 0:p.opacity),overlays:(null===(i=j.dark)||void 0===i?void 0:i.overlays)||v})})});c()(U.colorSchemes).forEach(function(n){var s=U.colorSchemes[n].palette,a=function(n){var a=n.split("-"),e=a[1],t=a[2];return R(n,s[e][t])};if("light"===n?(C(s.common,"background","#fff"),C(s.common,"onBackground","#000")):(C(s.common,"background","#000"),C(s.common,"onBackground","#fff")),!function(n,s){s.forEach(function(s){n[s]||(n[s]={})})}(s,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"]),"light"===n){C(s.Alert,"errorColor",(0,k.q8)(s.error.light,.6)),C(s.Alert,"infoColor",(0,k.q8)(s.info.light,.6)),C(s.Alert,"successColor",(0,k.q8)(s.success.light,.6)),C(s.Alert,"warningColor",(0,k.q8)(s.warning.light,.6)),C(s.Alert,"errorFilledBg",a("palette-error-main")),C(s.Alert,"infoFilledBg",a("palette-info-main")),C(s.Alert,"successFilledBg",a("palette-success-main")),C(s.Alert,"warningFilledBg",a("palette-warning-main")),C(s.Alert,"errorFilledColor",w(function(){return E.getContrastText(s.error.main)})),C(s.Alert,"infoFilledColor",w(function(){return E.getContrastText(s.info.main)})),C(s.Alert,"successFilledColor",w(function(){return E.getContrastText(s.success.main)})),C(s.Alert,"warningFilledColor",w(function(){return E.getContrastText(s.warning.main)})),C(s.Alert,"errorStandardBg",(0,k.ux)(s.error.light,.9)),C(s.Alert,"infoStandardBg",(0,k.ux)(s.info.light,.9)),C(s.Alert,"successStandardBg",(0,k.ux)(s.success.light,.9)),C(s.Alert,"warningStandardBg",(0,k.ux)(s.warning.light,.9)),C(s.Alert,"errorIconColor",a("palette-error-main")),C(s.Alert,"infoIconColor",a("palette-info-main")),C(s.Alert,"successIconColor",a("palette-success-main")),C(s.Alert,"warningIconColor",a("palette-warning-main")),C(s.AppBar,"defaultBg",a("palette-grey-100")),C(s.Avatar,"defaultBg",a("palette-grey-400")),C(s.Button,"inheritContainedBg",a("palette-grey-300")),C(s.Button,"inheritContainedHoverBg",a("palette-grey-A100")),C(s.Chip,"defaultBorder",a("palette-grey-400")),C(s.Chip,"defaultAvatarColor",a("palette-grey-700")),C(s.Chip,"defaultIconColor",a("palette-grey-700")),C(s.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),C(s.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),C(s.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),C(s.LinearProgress,"primaryBg",(0,k.ux)(s.primary.main,.62)),C(s.LinearProgress,"secondaryBg",(0,k.ux)(s.secondary.main,.62)),C(s.LinearProgress,"errorBg",(0,k.ux)(s.error.main,.62)),C(s.LinearProgress,"infoBg",(0,k.ux)(s.info.main,.62)),C(s.LinearProgress,"successBg",(0,k.ux)(s.success.main,.62)),C(s.LinearProgress,"warningBg",(0,k.ux)(s.warning.main,.62)),C(s.Skeleton,"bg","rgba(".concat(a("palette-text-primaryChannel")," / 0.11)")),C(s.Slider,"primaryTrack",(0,k.ux)(s.primary.main,.62)),C(s.Slider,"secondaryTrack",(0,k.ux)(s.secondary.main,.62)),C(s.Slider,"errorTrack",(0,k.ux)(s.error.main,.62)),C(s.Slider,"infoTrack",(0,k.ux)(s.info.main,.62)),C(s.Slider,"successTrack",(0,k.ux)(s.success.main,.62)),C(s.Slider,"warningTrack",(0,k.ux)(s.warning.main,.62));var e=(0,k.fk)(s.background.default,.8);C(s.SnackbarContent,"bg",e),C(s.SnackbarContent,"color",w(function(){return E.getContrastText(e)})),C(s.SpeedDialAction,"fabHoverBg",(0,k.fk)(s.background.paper,.15)),C(s.StepConnector,"border",a("palette-grey-400")),C(s.StepContent,"border",a("palette-grey-400")),C(s.Switch,"defaultColor",a("palette-common-white")),C(s.Switch,"defaultDisabledColor",a("palette-grey-100")),C(s.Switch,"primaryDisabledColor",(0,k.ux)(s.primary.main,.62)),C(s.Switch,"secondaryDisabledColor",(0,k.ux)(s.secondary.main,.62)),C(s.Switch,"errorDisabledColor",(0,k.ux)(s.error.main,.62)),C(s.Switch,"infoDisabledColor",(0,k.ux)(s.info.main,.62)),C(s.Switch,"successDisabledColor",(0,k.ux)(s.success.main,.62)),C(s.Switch,"warningDisabledColor",(0,k.ux)(s.warning.main,.62)),C(s.TableCell,"border",(0,k.ux)((0,k.zp)(s.divider,1),.88)),C(s.Tooltip,"bg",(0,k.zp)(s.grey[700],.92))}else{C(s.Alert,"errorColor",(0,k.ux)(s.error.light,.6)),C(s.Alert,"infoColor",(0,k.ux)(s.info.light,.6)),C(s.Alert,"successColor",(0,k.ux)(s.success.light,.6)),C(s.Alert,"warningColor",(0,k.ux)(s.warning.light,.6)),C(s.Alert,"errorFilledBg",a("palette-error-dark")),C(s.Alert,"infoFilledBg",a("palette-info-dark")),C(s.Alert,"successFilledBg",a("palette-success-dark")),C(s.Alert,"warningFilledBg",a("palette-warning-dark")),C(s.Alert,"errorFilledColor",w(function(){return D.getContrastText(s.error.dark)})),C(s.Alert,"infoFilledColor",w(function(){return D.getContrastText(s.info.dark)})),C(s.Alert,"successFilledColor",w(function(){return D.getContrastText(s.success.dark)})),C(s.Alert,"warningFilledColor",w(function(){return D.getContrastText(s.warning.dark)})),C(s.Alert,"errorStandardBg",(0,k.q8)(s.error.light,.9)),C(s.Alert,"infoStandardBg",(0,k.q8)(s.info.light,.9)),C(s.Alert,"successStandardBg",(0,k.q8)(s.success.light,.9)),C(s.Alert,"warningStandardBg",(0,k.q8)(s.warning.light,.9)),C(s.Alert,"errorIconColor",a("palette-error-main")),C(s.Alert,"infoIconColor",a("palette-info-main")),C(s.Alert,"successIconColor",a("palette-success-main")),C(s.Alert,"warningIconColor",a("palette-warning-main")),C(s.AppBar,"defaultBg",a("palette-grey-900")),C(s.AppBar,"darkBg",a("palette-background-paper")),C(s.AppBar,"darkColor",a("palette-text-primary")),C(s.Avatar,"defaultBg",a("palette-grey-600")),C(s.Button,"inheritContainedBg",a("palette-grey-800")),C(s.Button,"inheritContainedHoverBg",a("palette-grey-700")),C(s.Chip,"defaultBorder",a("palette-grey-700")),C(s.Chip,"defaultAvatarColor",a("palette-grey-300")),C(s.Chip,"defaultIconColor",a("palette-grey-300")),C(s.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),C(s.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),C(s.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),C(s.LinearProgress,"primaryBg",(0,k.q8)(s.primary.main,.5)),C(s.LinearProgress,"secondaryBg",(0,k.q8)(s.secondary.main,.5)),C(s.LinearProgress,"errorBg",(0,k.q8)(s.error.main,.5)),C(s.LinearProgress,"infoBg",(0,k.q8)(s.info.main,.5)),C(s.LinearProgress,"successBg",(0,k.q8)(s.success.main,.5)),C(s.LinearProgress,"warningBg",(0,k.q8)(s.warning.main,.5)),C(s.Skeleton,"bg","rgba(".concat(a("palette-text-primaryChannel")," / 0.13)")),C(s.Slider,"primaryTrack",(0,k.q8)(s.primary.main,.5)),C(s.Slider,"secondaryTrack",(0,k.q8)(s.secondary.main,.5)),C(s.Slider,"errorTrack",(0,k.q8)(s.error.main,.5)),C(s.Slider,"infoTrack",(0,k.q8)(s.info.main,.5)),C(s.Slider,"successTrack",(0,k.q8)(s.success.main,.5)),C(s.Slider,"warningTrack",(0,k.q8)(s.warning.main,.5));var t=(0,k.fk)(s.background.default,.98);C(s.SnackbarContent,"bg",t),C(s.SnackbarContent,"color",w(function(){return D.getContrastText(t)})),C(s.SpeedDialAction,"fabHoverBg",(0,k.fk)(s.background.paper,.15)),C(s.StepConnector,"border",a("palette-grey-600")),C(s.StepContent,"border",a("palette-grey-600")),C(s.Switch,"defaultColor",a("palette-grey-300")),C(s.Switch,"defaultDisabledColor",a("palette-grey-600")),C(s.Switch,"primaryDisabledColor",(0,k.q8)(s.primary.main,.55)),C(s.Switch,"secondaryDisabledColor",(0,k.q8)(s.secondary.main,.55)),C(s.Switch,"errorDisabledColor",(0,k.q8)(s.error.main,.55)),C(s.Switch,"infoDisabledColor",(0,k.q8)(s.info.main,.55)),C(s.Switch,"successDisabledColor",(0,k.q8)(s.success.main,.55)),C(s.Switch,"warningDisabledColor",(0,k.q8)(s.warning.main,.55)),C(s.TableCell,"border",(0,k.q8)((0,k.zp)(s.divider,1),.68)),C(s.Tooltip,"bg",(0,k.zp)(s.grey[700],.92))}x(s.background,"default"),x(s.background,"paper"),x(s.common,"background"),x(s.common,"onBackground"),x(s,"divider"),c()(s).forEach(function(n){var a=s[n];a&&"object"==typeof a&&(a.main&&C(s[n],"mainChannel",(0,k.LR)(b(a.main))),a.light&&C(s[n],"lightChannel",(0,k.LR)(b(a.light))),a.dark&&C(s[n],"darkChannel",(0,k.LR)(b(a.dark))),a.contrastText&&C(s[n],"contrastTextChannel",(0,k.LR)(b(a.contrastText))),"text"===n&&(x(s[n],"primary"),x(s[n],"secondary")),"action"===n&&(a.active&&x(s[n],"active"),a.selected&&x(s[n],"selected")))})});for(var N=arguments.length,H=Array(N>1?N-1:0),z=1;z<N;z++)H[z-1]=arguments[z];U=H.reduce(function(n,s){return(0,l.Z)(n,s)},U);var F=(0,r.Z)(U,{prefix:P,shouldSkipGeneratingVar:I}),L=F.vars,_=F.generateCssVars;return U.vars=L,U.generateCssVars=_,U.shouldSkipGeneratingVar=I,U.unstable_sxConfig=(0,e.Z)((0,e.Z)({},u.Z),null==Z?void 0:Z.unstable_sxConfig),U.unstable_sx=function(n){return(0,d.Z)({sx:n,theme:this})},U}},688682:function(n,s,a){"use strict";a.r(s),a.d(s,{Experimental_CssVarsProvider:function(){return A.CM},StyledEngineProvider:function(){return B.Z},THEME_ID:function(){return t.Z},ThemeProvider:function(){return P.Z},adaptV4Theme:function(){return m},alpha:function(){return y.Fq},createMuiTheme:function(){return g.A},createStyles:function(){return b},createTheme:function(){return g.Z},css:function(){return h.css},darken:function(){return y._j},decomposeColor:function(){return y.tB},duration:function(){return S.x9},easing:function(){return S.Ui},emphasize:function(){return y._4},experimentalStyled:function(){return T.ZP},experimental_extendTheme:function(){return E.Z},experimental_sx:function(){return z},getContrastRatio:function(){return y.mi},getInitColorSchemeScript:function(){return A.JO},getLuminance:function(){return y.H3},getOverlayAlpha:function(){return V.Z},hexToRgb:function(){return y.oo},hslToRgb:function(){return y.ve},keyframes:function(){return h.keyframes},lighten:function(){return y.$n},makeStyles:function(){return I},private_createMixins:function(){return N.Z},private_createTypography:function(){return U.Z},private_excludeVariablesFromRoot:function(){return H.Z},recomposeColor:function(){return y.wy},responsiveFontSizes:function(){return w.Z},rgbToHex:function(){return y.vq},shouldSkipGeneratingVar:function(){return D.Z},styled:function(){return T.ZP},unstable_createMuiStrictModeTheme:function(){return v},unstable_getUnit:function(){return x.getUnit},unstable_toUnitless:function(){return x.toUnitless},useColorScheme:function(){return A.tv},useTheme:function(){return M.Z},useThemeProps:function(){return j.Z},withStyles:function(){return Z},withTheme:function(){return R}});var e=a(11642),t=a(366671),o=a(974468),p=a(41732),c=a(532534),l=a(512815),i=a.n(l),r=a(349011),u=a(581472),d=["defaultProps","mixins","overrides","palette","props","styleOverrides"],k=["type","mode"];function m(n){var s=n.defaultProps,a=void 0===s?{}:s,e=n.mixins,t=void 0===e?{}:e,l=n.overrides,m=void 0===l?{}:l,y=n.palette,h=void 0===y?{}:y,g=n.props,f=void 0===g?{}:g,v=n.styleOverrides,C=void 0===v?{}:v,b=(0,c.Z)(n,d),x=(0,p.Z)((0,p.Z)({},b),{},{components:{}});i()(a).forEach(function(n){var s=x.components[n]||{};s.defaultProps=a[n],x.components[n]=s}),i()(f).forEach(function(n){var s=x.components[n]||{};s.defaultProps=f[n],x.components[n]=s}),i()(C).forEach(function(n){var s=x.components[n]||{};s.styleOverrides=C[n],x.components[n]=s}),i()(m).forEach(function(n){var s=x.components[n]||{};s.styleOverrides=m[n],x.components[n]=s}),x.spacing=(0,r.Z)(n.spacing);var w=(0,u.Z)(n.breakpoints||{}),S=x.spacing;x.mixins=(0,p.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,p.Z)((0,p.Z)({paddingLeft:S(2),paddingRight:S(2)},n),{},(0,o.Z)({},w.up("sm"),(0,p.Z)({paddingLeft:S(3),paddingRight:S(3)},n[w.up("sm")])))}},t);var M=h.type,j=h.mode,T=(0,c.Z)(h,k),P=j||M||"light";return x.palette=(0,p.Z)({text:{hint:"dark"===P?"rgba(255, 255, 255, 0.5)":"rgba(0, 0, 0, 0.38)"},mode:P,type:P},T),x}var y=a(71468),h=a(895519),g=a(239434),f=a(288569);function v(n){for(var s=arguments.length,a=Array(s>1?s-1:0),e=1;e<s;e++)a[e-1]=arguments[e];return g.Z.apply(void 0,[(0,f.Z)({unstable_strictMode:!0},n)].concat(a))}var C=!1;function b(n){return C||(console.warn("MUI: createStyles from @mui/material/styles is deprecated.\nPlease use @mui/styles/createStyles"),C=!0),n}var x=a(524956),w=a(658005),S=a(385121),M=a(480487),j=a(746223),T=a(614099),P=a(539710),B=a(688215);function I(){throw Error((0,e.Z)(14))}function Z(){throw Error((0,e.Z)(15))}function R(){throw Error((0,e.Z)(16))}var A=a(324113),E=a(546068),V=a(942720),D=a(90730),U=a(383312),N=a(550039),H=a(570653);function z(){throw Error((0,e.Z)(20))}},658005:function(n,s,a){"use strict";a.d(s,{Z:function(){return l}});var e=a(41732),t=a(11642),o=a(393356),p=a.n(o),c=a(524956);function l(n){var s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=s.breakpoints,o=s.disableAlign,l=void 0!==o&&o,i=s.factor,r=void 0===i?2:i,u=s.variants,d=(0,e.Z)({},n);d.typography=(0,e.Z)({},d.typography);var k=d.typography,m=(0,c.convertLength)(k.htmlFontSize),y=(void 0===a?["sm","md","lg"]:a).map(function(n){return d.breakpoints.values[n]});return(void 0===u?["h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","caption","button","overline"]:u).forEach(function(n){var s=k[n];if(s){var a=p()(m(s.fontSize,"rem"));if(!(a<=1)){var o=1+(a-1)/r,i=s.lineHeight;if(!(0,c.isUnitless)(i)&&!l)throw Error((0,t.Z)(6));(0,c.isUnitless)(i)||(i=p()(m(i,"rem"))/p()(a));var u=null;l||(u=function(n){return(0,c.alignProperty)({size:n,grid:(0,c.fontGrid)({pixels:4,lineHeight:i,htmlFontSize:k.htmlFontSize})})}),k[n]=(0,e.Z)((0,e.Z)({},s),(0,c.responsiveProperty)({cssProperty:"fontSize",min:o,max:a,unit:"rem",breakpoints:y,transform:u}))}}}),d}},90730:function(n,s,a){"use strict";function e(n){var s;return!!n[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/)||!!n[0].match(/sxConfig$/)||"palette"===n[0]&&!!(null!==(s=n[1])&&void 0!==s&&s.match(/(mode|contrastThreshold|tonalOffset)/))}a.d(s,{Z:function(){return e}})},746223:function(n,s,a){"use strict";a.d(s,{Z:function(){return p}});var e=a(903961),t=a(790462),o=a(366671);function p(n){var s=n.props,a=n.name;return(0,e.Z)({props:s,name:a,defaultTheme:t.Z,themeId:o.Z})}},688215:function(n,s,a){"use strict";a.d(s,{Z:function(){return c}}),a(192379);var e,t=a(419715),o=a(342563),p=a(200651);function c(n){var s=n.injectFirst,a=n.children;return s&&e?(0,p.jsx)(t.C,{value:e,children:a}):a}"object"==typeof document&&(e=(0,o.default)({key:"css",prepend:!0}))},780660:function(n,s){"use strict";s.Z={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:"-1px",overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"}},436299:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return G}});var e,t,o,p,c,l,i,r,u,d,k,m={};a.r(m),a.d(m,{demoComponents:function(){return q},demos:function(){return K},docs:function(){return $},srcComponents:function(){return O}});var y=a(41732),h=a(192379),g=a.t(h,2),f=a(470057),v=a(688682),C=a(348855),b=a(813391),x=a(351844),w=a(133134),S=a(895519),M=a(239434),j=a(614099),T=a(71468),P=a(539710),B=a(76268),I=a(545610),Z=a(200651),R=(0,M.Z)({palette:{primary:{main:"#20b2aa"}}}),A=(0,j.ZP)(B.ZP)(function(n){var s=n.theme;return"\n  color: ".concat(s.palette.primary.main,";\n\n  :hover {\n    color: ").concat((0,T._j)(s.palette.primary.main,.2),";\n  }\n")}),E=a(344204),V=(0,j.ZP)(B.ZP)(t||(t=(0,E.Z)(["\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n\n  & .MuiSlider-thumb {\n    border-radius: 1px;\n  }\n"]))),D=a(532534),U=a(658360),N=a(557058),H=["className"],z=(0,j.ZP)(function(n){var s=n.className,a=(0,D.Z)(n,H);return(0,Z.jsx)(N.Z,(0,y.Z)((0,y.Z)({},a),{},{classes:{popper:s}}))})(c||(c=(0,E.Z)(["\n  & .MuiTooltip-tooltip {\n    background: navy;\n  }\n"]))),F=(0,j.ZP)(B.ZP)(i||(i=(0,E.Z)(["\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n"]))),L=a(419715);function _(n,s,a){return L.h.call(s,"css")?Z.jsx(L.E,(0,L.c)(n,s),a):Z.jsx(n,s,a)}a(342563),a(26095),a(185045),a(997035),Z.Fragment;var $={en:{description:"While you can use the Emotion-based styling solution provided by Material\xa0UI, you can also use the one you already know, from plain CSS to styled-components.",location:"/docs/data/material/integrations/interoperability/interoperability.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M22.8481 4C22.8481 2.9 21.9481 2 20.8481 2H4.84814C3.74814 2 2.84814 2.9 2.84814 4V16C2.84814 17.1 3.74814 18 4.84814 18H18.8481L22.8481 22V4ZM16.8481 11H13.8481V14C13.8481 14.55 13.3981 15 12.8481 15C12.2981 15 11.8481 14.55 11.8481 14V11H8.84814C8.29814 11 7.84814 10.55 7.84814 10C7.84814 9.45 8.29814 9 8.84814 9H11.8481V6C11.8481 5.45 12.2981 5 12.8481 5C13.3981 5 13.8481 5.45 13.8481 6V9H16.8481C17.3981 9 17.8481 9.45 17.8481 10C17.8481 10.55 17.3981 11 16.8481 11Z" />\n      </symbol>\n      </svg>','<h1>Style library interoperability</h1><p class="description">While you can use the Emotion-based styling solution provided by Material\xa0UI, you can also use the one you already know, from plain CSS to styled-components.</p>\n\n<p>This guide aims to document the most popular alternatives,\nbut you should find that the principles applied here can be adapted to other libraries.\nThere are examples for the following styling solutions:</p>\n<ul>\n<li><a href="#plain-css">Plain CSS</a></li>\n<li><a href="#global-css">Global CSS</a></li>\n<li><a href="#styled-components">Styled Components</a></li>\n<li><a href="#css-modules">CSS\xa0Modules</a></li>\n<li><a href="#emotion">Emotion</a></li>\n<li><a href="#tailwind-css">Tailwind\xa0CSS</a></li>\n<li><a href="#jss-tss"><del>JSS</del> TSS</a></li>\n</ul>\n<h2 id="plain-css">Plain CSS<a aria-labelledby="plain-css" class="anchor-link" href="#plain-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="plain-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Nothing fancy, just plain CSS.</p>\n',{demo:"StyledComponents.js",hideToolbar:!0},'<p><a href="https://codesandbox.io/p/sandbox/plain-css-fdue7"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Button"></a></p>\n<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSlider.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSlider.css</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./PlainCssSlider.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PlainCssSlider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="css-injection-order">CSS injection order ⚠️<a aria-labelledby="css-injection-order" class="anchor-link" href="#css-injection-order" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-injection-order"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><strong>Note:</strong> Most CSS-in-JS solutions inject their styles at the bottom of the HTML <code>&lt;head&gt;</code>, which gives Material\xa0UI precedence over your custom styles. To remove the need for <strong>!important</strong>, you need to change the CSS injection order. Here&#39;s a demo of how it can be done in Material\xa0UI:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyledEngineProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledEngineProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledEngineProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using Emotion and have a custom cache in your app, that one will override the one coming from Material\xa0UI. In order for the injection order to still be correct, you need to add the prepend option. Here is an example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">prepend</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PlainCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using styled-components and have <code>StyleSheetManager</code> with a custom <code>target</code>, make sure that the target is the first element in the HTML <code>&lt;head&gt;</code>. If you are curious to see how it can be done, you can take a look on the <a href="https://github.com/mui/material-ui/blob/v5.16.1/packages/mui-styled-engine-sc/src/StyledEngineProvider/StyledEngineProvider.js"><code>StyledEngineProvider</code></a> implementation in the <code>@mui/styled-engine-sc</code> package.</p>\n<h3 id="deeper-elements">Deeper elements<a aria-labelledby="deeper-elements" class="anchor-link" href="#deeper-elements" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="deeper-elements"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you attempt to style the Slider,\nyou will likely need to affect some of the Slider&#39;s child elements, for example the thumb.\nIn Material\xa0UI, all child elements have an increased specificity of 2: <code>.parent .child {}</code>. When writing overrides, you need to do the same.</p>\n<p>The following examples override the slider&#39;s <code>thumb</code> style in addition to the custom styles on the slider itself.</p>\n',{demo:"StyledComponentsDeep.js",hideToolbar:!0},'<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSliderDeep1.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider .MuiSlider-thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSliderDeep1.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./PlainCssSliderDeep1.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PlainCssSliderDeep1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The above demo relies on the <a href="/system/styles/advanced/">default <code>className</code> values</a>, but you can provide your own class name with the <code>slotProps</code> API.</p>\n<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSliderDeep2.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider .thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">PlainCssSliderDeep2.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./PlainCssSliderDeep2.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PlainCssSliderDeep2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span>\n        <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span>\n        <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">thumb</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">\'thumb\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="global-css">Global CSS<a aria-labelledby="global-css" class="anchor-link" href="#global-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="global-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Explicitly providing the class names to the component is too much effort?\n<a href="/system/styles/advanced/">You can target the class names generated by Material\xa0UI</a>.</p>\n<p><a href="https://codesandbox.io/p/sandbox/global-classnames-dho8k"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Button"></a></p>\n<div class="MuiCode-root"><div class="MuiCode-title">GlobalCssSlider.css</div><pre><code class="language-css"><span class="token selector">.MuiSlider-root</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.MuiSlider-root:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">GlobalCssSlider.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./GlobalCssSlider.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssSlider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="css-injection-order-2">CSS injection order ⚠️<a aria-labelledby="css-injection-order-2" class="anchor-link" href="#css-injection-order-2" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-injection-order-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><strong>Note:</strong> Most CSS-in-JS solutions inject their styles at the bottom of the HTML <code>&lt;head&gt;</code>, which gives Material\xa0UI precedence over your custom styles. To remove the need for <strong>!important</strong>, you need to change the CSS injection order. Here&#39;s a demo of how it can be done in Material\xa0UI:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyledEngineProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledEngineProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledEngineProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using Emotion and have a custom cache in your app, that one will override the one coming from Material\xa0UI. In order for the injection order to still be correct, you need to add the prepend option. Here is an example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">prepend</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using styled-components and have <code>StyleSheetManager</code> with a custom <code>target</code>, make sure that the target is the first element in the HTML <code>&lt;head&gt;</code>. If you are curious to see how it can be done, you can take a look on the <a href="https://github.com/mui/material-ui/blob/v5.16.1/packages/mui-styled-engine-sc/src/StyledEngineProvider/StyledEngineProvider.js"><code>StyledEngineProvider</code></a> implementation in the <code>@mui/styled-engine-sc</code> package.</p>\n<h3 id="deeper-elements-2">Deeper elements<a aria-labelledby="deeper-elements-2" class="anchor-link" href="#deeper-elements-2" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="deeper-elements-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you attempt to style the Slider,\nyou will likely need to affect some of the Slider&#39;s child elements, for example the thumb.\nIn Material\xa0UI, all child elements have an increased specificity of 2: <code>.parent .child {}</code>. When writing overrides, you need to do the same.</p>\n<p>The following example overrides the slider&#39;s <code>thumb</code> style in addition to the custom styles on the slider itself.</p>\n',{demo:"StyledComponentsDeep.js",hideToolbar:!0},'<div class="MuiCode-root"><div class="MuiCode-title">GlobalCssSliderDeep.css</div><pre><code class="language-css"><span class="token selector">.MuiSlider-root</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.MuiSlider-root:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.MuiSlider-root .MuiSlider-thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">GlobalCssSliderDeep.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./GlobalCssSliderDeep.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssSliderDeep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="styled-components">Styled Components<a aria-labelledby="styled-components" class="anchor-link" href="#styled-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="styled-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><img src="https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star" alt="stars">\n<img src="https://img.shields.io/npm/dm/styled-components.svg" alt="npm"></p>\n<h3 id="change-the-default-styled-engine">Change the default styled engine<a aria-labelledby="change-the-default-styled-engine" class="anchor-link" href="#change-the-default-styled-engine" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="change-the-default-styled-engine"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>By default, Material\xa0UI components come with Emotion as their style engine.\nIf, however, you would like to use styled-components, you can configure your app by following the <a href="/material-ui/integrations/styled-components/">styled-components guide</a> or starting with one of the example projects:</p>\n<!-- #default-branch-switch -->\n\n<ul>\n<li><a href="https://github.com/mui/material-ui/tree/master/examples/material-ui-cra-styled-components">Create React App with styled-components</a></li>\n<li><a href="https://github.com/mui/material-ui/tree/master/examples/material-ui-cra-styled-components-ts">Create React App with styled-components and TypeScript</a></li>\n</ul>\n<p>Following this approach reduces the bundle size, and removes the need to configure the CSS injection order.</p>\n<p>After the style engine is configured properly, you can use the <a href="/system/styled/"><code>styled()</code></a> utility\nfrom <code>@mui/material/styles</code> and have direct access to the theme.</p>\n',{demo:"StyledComponents.js",hideToolbar:!0},'<p><a href="https://codesandbox.io/p/sandbox/styled-components-interoperability-w9z9d"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Button"></a></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomizedSlider <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Slider<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">StyledComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomizedSlider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="deeper-elements-3">Deeper elements<a aria-labelledby="deeper-elements-3" class="anchor-link" href="#deeper-elements-3" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="deeper-elements-3"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you attempt to style the Slider,\nyou will likely need to affect some of the Slider&#39;s child elements, for example the thumb.\nIn Material\xa0UI, all child elements have an increased specificity of 2: <code>.parent .child {}</code>. When writing overrides, you need to do the same.</p>\n<p>The following examples override the slider&#39;s <code>thumb</code> style in addition to the custom styles on the slider itself.</p>\n',{demo:"StyledComponentsDeep.js",defaultCodeOpen:!0},'<p>The above demo relies on the <a href="/system/styles/advanced/">default <code>className</code> values</a>, but you can provide your own class name with the <code>slotProps</code> API.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> CustomizedSlider <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">thumb</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">\'thumb\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n\n  &amp; .thumb {\n    border-radius: 1px;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">StyledComponentsDeep2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomizedSlider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="theme">Theme<a aria-labelledby="theme" class="anchor-link" href="#theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>By using the Material\xa0UI theme provider, the theme will be available in the theme context\nof the styled engine too (Emotion or styled-components, depending on your configuration).</p>\n<aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>If you are already using a custom theme with styled-components or Emotion,\nit might not be compatible with Material\xa0UI&#39;s theme specification. If it&#39;s not\ncompatible, you need to render Material\xa0UI&#39;s ThemeProvider first. This will\nensure the theme structures are isolated. This is ideal for the progressive adoption\nof Material\xa0UI&#39;s components in the codebase.</p>\n\n</div></aside><p>You are encouraged to share the same theme object between Material\xa0UI and the rest of your project.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> CustomizedSlider <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Slider<span class="token punctuation">)</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n\n  :hover {\n    color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">darken</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"StyledComponentsTheme.js"},'<h3 id="portals">Portals<a aria-labelledby="portals" class="anchor-link" href="#portals" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="portals"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The <a href="/material-ui/react-portal/">Portal</a> provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\nBecause of the way styled-components scopes its CSS, you may run into issues where styling is not applied.</p>\n<p>For example, if you attempt to style the <code>tooltip</code> generated by the <a href="/material-ui/react-tooltip/">Tooltip</a> component,\nyou will need to pass along the <code>className</code> property to the element being rendered outside of it&#39;s DOM hierarchy.\nThe following example shows a workaround:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> styled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@mui/material/Button\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Tooltip <span class="token keyword">from</span> <span class="token string">\'@mui/material/Tooltip\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> StyledTooltip <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> className<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Tooltip</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">popper</span><span class="token operator">:</span> className <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &amp; .MuiTooltip-tooltip {\n    background: navy;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n',{demo:"StyledComponentsPortal.js"},'<h2 id="css-modules">CSS\xa0Modules<a aria-labelledby="css-modules" class="anchor-link" href="#css-modules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-modules"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><img src="https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star" alt="stars"></p>\n<p>It&#39;s hard to know the market share of <a href="https://github.com/css-modules/css-modules">this styling solution</a> as it&#39;s dependent on the\nbundling solution people are using.</p>\n',{demo:"StyledComponents.js",hideToolbar:!0},'<p><a href="https://codesandbox.io/p/sandbox/css-modules-nuyg8"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Button"></a></p>\n<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSlider.module.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSlider.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n<span class="token comment">// Webpack, Parcel or else will inject the CSS into the page</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./CssModulesSlider.module.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CssModulesSlider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>slider<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="css-injection-order-3">CSS injection order ⚠️<a aria-labelledby="css-injection-order-3" class="anchor-link" href="#css-injection-order-3" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-injection-order-3"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p><strong>Note:</strong> Most CSS-in-JS solutions inject their styles at the bottom of the HTML <code>&lt;head&gt;</code>, which gives Material\xa0UI precedence over your custom styles. To remove the need for <strong>!important</strong>, you need to change the CSS injection order. Here&#39;s a demo of how it can be done in Material\xa0UI:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyledEngineProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledEngineProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledEngineProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using Emotion and have a custom cache in your app, that one will override the one coming from Material\xa0UI. In order for the injection order to still be correct, you need to add the prepend option. Here is an example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">prepend</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CssModulesPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using styled-components and have <code>StyleSheetManager</code> with a custom <code>target</code>, make sure that the target is the first element in the HTML <code>&lt;head&gt;</code>. If you are curious to see how it can be done, you can take a look on the <a href="https://github.com/mui/material-ui/blob/v5.16.1/packages/mui-styled-engine-sc/src/StyledEngineProvider/StyledEngineProvider.js"><code>StyledEngineProvider</code></a> implementation in the <code>@mui/styled-engine-sc</code> package.</p>\n<h3 id="deeper-elements-4">Deeper elements<a aria-labelledby="deeper-elements-4" class="anchor-link" href="#deeper-elements-4" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="deeper-elements-4"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you attempt to style the Slider,\nyou will likely need to affect some of the Slider&#39;s child elements, for example the thumb.\nIn Material\xa0UI, all child elements have an increased specificity of 2: <code>.parent .child {}</code>. When writing overrides, you need to do the same.\nIt&#39;s important to keep in mind that CSS\xa0Modules adds an unique id to each class, and that id won&#39;t be present on the Material\xa0UI provided children class. To escape from that, CSS\xa0Modules provides a functionality, the <code>:global</code> selector.</p>\n<p>The following examples override the slider&#39;s <code>thumb</code> style in addition to the custom styles on the slider itself.</p>\n',{demo:"StyledComponentsDeep.js",hideToolbar:!0},'<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSliderDeep1.module.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider :global .MuiSlider-thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSliderDeep1.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token comment">// Webpack, Parcel or else will inject the CSS into the page</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./CssModulesSliderDeep1.module.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CssModulesSliderDeep1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>slider<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The above demo relies on the <a href="/system/styles/advanced/">default <code>className</code> values</a>, but you can provide your own class name with the <code>slotProps</code> API.</p>\n<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSliderDeep2.module.css</div><pre><code class="language-css"><span class="token selector">.slider</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #20b2aa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #2e8b57<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.slider .thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><div class="MuiCode-title">CssModulesSliderDeep2.js</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token comment">// Webpack, Parcel or else will inject the CSS into the page</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./CssModulesSliderDeep2.module.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CssModulesSliderDeep2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span>\n        <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>slider<span class="token punctuation">}</span></span>\n        <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">thumb</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> styles<span class="token punctuation">.</span>thumb <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="emotion">Emotion<a aria-labelledby="emotion" class="anchor-link" href="#emotion" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="emotion"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><img src="https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star" alt="stars">\n<img src="https://img.shields.io/npm/dm/@emotion/react.svg" alt="npm"></p>\n<h3 id="the-css-prop">The <code>css</code> prop<a aria-labelledby="the-css-prop" class="anchor-link" href="#the-css-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-css-prop"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Emotion&#39;s <code>css()</code> method works seamlessly with Material\xa0UI.</p>\n',{demo:"EmotionCSS.js",defaultCodeOpen:!0},'<h3 id="theme-2">Theme<a aria-labelledby="theme-2" class="anchor-link" href="#theme-2" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="theme-2"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>It works exactly like styled components. You can <a href="/material-ui/integrations/interoperability/#styled-components">use the same guide</a>.</p>\n<h3 id="the-styled-api">The <code>styled()</code> API<a aria-labelledby="the-styled-api" class="anchor-link" href="#the-styled-api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-styled-api"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>It works exactly like styled components. You can <a href="/material-ui/integrations/interoperability/#styled-components">use the same guide</a>.</p>\n<h2 id="tailwind-css">Tailwind\xa0CSS<a aria-labelledby="tailwind-css" class="anchor-link" href="#tailwind-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="tailwind-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><img src="https://img.shields.io/github/stars/tailwindlabs/tailwindcss.svg?style=social&label=Star" alt="stars">\n<img src="https://img.shields.io/npm/dm/tailwindcss" alt="npm"></p>\n<h3 id="setup">Setup<a aria-labelledby="setup" class="anchor-link" href="#setup" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="setup"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you are used to Tailwind\xa0CSS and want to use it together with the Material\xa0UI components, you can start by cloning the <a href="https://github.com/mui/material-ui/tree/master/examples/material-ui-cra-tailwind-ts">Tailwind\xa0CSS</a> example project.\nIf you use a different framework, or already have set up your project, follow these steps:</p>\n<ol>\n<li>Add Tailwind\xa0CSS to your project, following the instructions in <a href="https://tailwindcss.com/docs/installation" target="_blank" rel="noopener nofollow">https://tailwindcss.com/docs/installation</a>.</li>\n<li>Remove <a href="https://tailwindcss.com/docs/preflight" target="_blank" rel="noopener nofollow">Tailwind\xa0CSS&#39;s preflight</a> style so it can use the Material\xa0UI&#39;s preflight instead (<a href="/material-ui/react-css-baseline/">CssBaseline</a>).</li>\n</ol>\n<div class="MuiCode-root"><div class="MuiCode-title">tailwind.config.js</div><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  corePlugins: {\n</span><span class="token prefix inserted">+</span><span class="token line">    preflight: false,\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<ol start="3">\n<li>Add the <code>important</code> option, using the id of your app wrapper. For example, <code>#__next</code> for Next.js and <code>&quot;#root&quot;</code> for CRA:</li>\n</ol>\n<div class="MuiCode-root"><div class="MuiCode-title">tailwind.config.js</div><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  content: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    "./src/**/*.{js,jsx,ts,tsx}",\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  important: \'#root\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  theme: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    extend: {},\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [],\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Most of the CSS used by Material\xa0UI has a specificity of 1, hence this <code>important</code> property is unnecessary.\nHowever, in a few edge cases, Material\xa0UI uses nested CSS selectors that win over Tailwind\xa0CSS.\nUse this step to help ensure that the <a href="#deeper-elements-5">deeper elements</a> can always be customized using Tailwind&#39;s utility classes.\nMore details on this option can be found here <a href="https://tailwindcss.com/docs/configuration#selector-strategy" target="_blank" rel="noopener nofollow">https://tailwindcss.com/docs/configuration#selector-strategy</a></p>\n<ol start="4">\n<li>Fix the CSS injection order. Most CSS-in-JS solutions inject their styles at the bottom of the HTML <code>&lt;head&gt;</code>, which gives Material\xa0UI precedence over Tailwind\xa0CSS. To reduce the need for the <code>important</code> property, you need to change the CSS injection order. Here&#39;s a demo of how it can be done in Material\xa0UI:</li>\n</ol>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyledEngineProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledEngineProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledEngineProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using Emotion and have a custom cache in your app, it will override the one coming from Material\xa0UI. In order for the injection order to still be correct, you need to add the prepend option. Here is an example:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">prepend</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PlainCssPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token comment">/* Your component tree. Now you can override Material UI\'s styles. */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p><strong>Note:</strong> If you are using styled-components and have <code>StyleSheetManager</code> with a custom <code>target</code>, make sure that the target is the first element in the HTML <code>&lt;head&gt;</code>. If you are curious to see how it can be done, you can take a look at the <a href="https://github.com/mui/material-ui/blob/v5.16.1/packages/mui-styled-engine-sc/src/StyledEngineProvider/StyledEngineProvider.js"><code>StyledEngineProvider</code></a> implementation in the <code>@mui/styled-engine-sc</code> package.</p>\n<ol start="5">\n<li>Change the target container for <code>Portal</code>-related elements so that they are injected under the main app wrapper that was used in step 3 for setting up the <code>important</code> option in the Tailwind config.</li>\n</ol>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiPopover</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">container</span><span class="token operator">:</span> rootElement<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">MuiPopper</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">container</span><span class="token operator">:</span> rootElement<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">MuiDialog</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">container</span><span class="token operator">:</span> rootElement<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">MuiModal</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">container</span><span class="token operator">:</span> rootElement<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nroot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledEngineProvider</span></span> <span class="token attr-name">injectFirst</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">StyledEngineProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="usage">Usage<a aria-labelledby="usage" class="anchor-link" href="#usage" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="usage"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Now it&#39;s all set up and you can start using Tailwind\xa0CSS on the Material\xa0UI components!</p>\n',{demo:"StyledComponents.js",hideToolbar:!0},'<p><a href="https://stackblitz.com/edit/github-ndkshy?file=pages%2Findex.tsx"><img src="https://developer.stackblitz.com/img/open_in_stackblitz.svg" alt="Edit on StackBlitz"></a></p>\n<div class="MuiCode-root"><div class="MuiCode-title">index.tsx</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-teal-600<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="deeper-elements-5">Deeper elements<a aria-labelledby="deeper-elements-5" class="anchor-link" href="#deeper-elements-5" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="deeper-elements-5"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you attempt to style the Slider, for example, you&#39;ll likely want to customize its child elements.</p>\n<p>This example showcases how to override the Slider&#39;s <code>thumb</code> style.</p>\n',{demo:"StyledComponentsDeep.js",hideToolbar:!0},'<div class="MuiCode-root"><div class="MuiCode-title">SliderThumbOverrides.tsx</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SliderThumbOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span>\n        <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-teal-600<span class="token punctuation">"</span></span>\n        <span class="token attr-name">slotProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">thumb</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">\'rounded-sm\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="styling-pseudo-states">Styling pseudo states<a aria-labelledby="styling-pseudo-states" class="anchor-link" href="#styling-pseudo-states" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="styling-pseudo-states"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>If you want to style a component&#39;s pseudo-state, you can use the appropriate key in the <code>classes</code> prop.\nHere is an example of how you can style the Slider&#39;s active state:</p>\n<div class="MuiCode-root"><div class="MuiCode-title">SliderPseudoStateOverrides.tsx</div><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Slider <span class="token keyword">from</span> <span class="token string">\'@mui/material/Slider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SliderThumbOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Slider</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span></span> <span class="token attr-name">classes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token string">\'shadow-none\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="jss-tss"><del>JSS</del> TSS<a aria-labelledby="jss-tss" class="anchor-link" href="#jss-tss" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="jss-tss"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p><a href="https://cssinjs.org/">JSS</a> itself is no longer supported in Material\xa0UI, however,\nif you like the hook-based API (<code>makeStyles</code> → <code>useStyles</code>) that <a href="https://codesandbox.io/p/sandbox/j3l06yyqpw"><code>react-jss</code></a> was offering you can opt for <a href="https://github.com/garronej/tss-react"><code>tss-react</code></a>.</p>\n<p><a href="https://docs.tss-react.dev">TSS</a> integrates well with Material\xa0UI and provide a better\nTypeScript support than JSS.</p>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>If you are updating from <code>@material-ui/core</code> (v4) to <code>@mui/material</code> (v5), check out the <a href="/material-ui/migration/migrating-from-jss/#2-use-tss-react">tss-react section</a> of the Migration guide.</p>\n\n</div></aside><div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> muiCache <span class="token operator">=</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">\'mui\'</span><span class="token punctuation">,</span>\n  prepend<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//NOTE: Don\'t use &lt;StyledEngineProvider injectFirst/></span>\n<span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>muiCache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Root</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Now you can simply\n<code>import { makeStyles, withStyles } from &#39;tss-react/mui&#39;</code>.\nThe theme object that will be passed to your callbacks functions will be the one you\nget with\n<code>import { useTheme } from &#39;@mui/material/styles&#39;</code>.</p>\n<p>If you want to take controls over what the <code>theme</code> object should be,\nyou can re-export <code>makeStyles</code> and <code>withStyles</code> from a file called, for example, <code>makesStyles.ts</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token comment">//WARNING: tss-react require TypeScript v4.4 or newer. If you can\'t update use:</span>\n<span class="token comment">//import { createMakeAndWithStyles } from "tss-react/compat";</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createMakeAndWithStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'tss-react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> makeStyles<span class="token punctuation">,</span> withStyles <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createMakeAndWithStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  useTheme<span class="token punctuation">,</span>\n  <span class="token comment">/*\n    OR, if you have extended the default mui theme adding your own custom properties:\n    Let\'s assume the myTheme object that you provide to the &lt;ThemeProvider /> is of\n    type MyTheme then you\'ll write:\n    */</span>\n  <span class="token comment">//"useTheme": useTheme as (()=> MyTheme)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Then, the library is used like this:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> makeStyles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'tss-react/mui\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> setColor<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token string">\'red\'</span> <span class="token operator">|</span> <span class="token string">\'blue\'</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'red\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> classes<span class="token punctuation">,</span> cx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//Thanks to cx, className will take priority over classes.root</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span>root<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> makeStyles<span class="token operator">&lt;</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">\'red\'</span> <span class="token operator">|</span> <span class="token string">\'blue\'</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>theme<span class="token punctuation">,</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;:hover\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      backgroundColor<span class="token operator">:</span> theme<span class="token punctuation">.</span>palette<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>main<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>For info on how to setup SSR or anything else, please refer to <a href="https://github.com/garronej/tss-react">the TSS documentation</a>.</p>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p>There is <a href="https://docs.tss-react.dev/detecting-unused-classes">an ESLint plugin</a> for detecting unused classes.</p>\n\n</div></aside><aside class="MuiCallout-root MuiCallout-warning">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#warning-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p><strong>Keep <code>@emotion/styled</code> as a dependency of your project</strong>. Even if you never use it explicitly,\nit&#39;s a peer dependency of <code>@mui/material</code>.</p>\n\n</div></aside>'],toc:[{text:"Plain CSS",level:2,hash:"plain-css",children:[{text:"CSS injection order ⚠️",level:3,hash:"css-injection-order"},{text:"Deeper elements",level:3,hash:"deeper-elements"}]},{text:"Global CSS",level:2,hash:"global-css",children:[{text:"CSS injection order ⚠️",level:3,hash:"css-injection-order-2"},{text:"Deeper elements",level:3,hash:"deeper-elements-2"}]},{text:"Styled Components",level:2,hash:"styled-components",children:[{text:"Change the default styled engine",level:3,hash:"change-the-default-styled-engine"},{text:"Deeper elements",level:3,hash:"deeper-elements-3"},{text:"Theme",level:3,hash:"theme"},{text:"Portals",level:3,hash:"portals"}]},{text:"CSS\xa0Modules",level:2,hash:"css-modules",children:[{text:"CSS injection order ⚠️",level:3,hash:"css-injection-order-3"},{text:"Deeper elements",level:3,hash:"deeper-elements-4"}]},{text:"Emotion",level:2,hash:"emotion",children:[{text:"The css prop",level:3,hash:"the-css-prop"},{text:"Theme",level:3,hash:"theme-2"},{text:"The styled(&#8203;) API",level:3,hash:"the-styled-api"}]},{text:"Tailwind\xa0CSS",level:2,hash:"tailwind-css",children:[{text:"Setup",level:3,hash:"setup"},{text:"Usage",level:3,hash:"usage"},{text:"Deeper elements",level:3,hash:"deeper-elements-5"},{text:"Styling pseudo states",level:3,hash:"styling-pseudo-states"}]},{text:"<del>JSS</del> TSS",level:2,hash:"jss-tss",children:[]}],title:"Style library interoperability",headers:{components:[]}}},K={"StyledComponentsTheme.js":{module:"./StyledComponentsTheme.js",raw:"import * as React from 'react';\nimport { createTheme, styled, ThemeProvider, darken } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst customTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#20b2aa',\n    },\n  },\n});\n\nconst CustomizedSlider = styled(Slider)(\n  ({ theme }) => `\n  color: ${theme.palette.primary.main};\n\n  :hover {\n    color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n`,\n);\n\nexport default function StyledComponentsTheme() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <ThemeProvider theme={customTheme}>\n        <CustomizedSlider defaultValue={30} />\n      </ThemeProvider>\n    </Box>\n  );\n}\n",jsxPreview:"<ThemeProvider theme={customTheme}>\n  <CustomizedSlider defaultValue={30} />\n</ThemeProvider>",moduleTS:"./StyledComponentsTheme.js",rawTS:"import * as React from 'react';\nimport { createTheme, styled, ThemeProvider, darken } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst customTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#20b2aa',\n    },\n  },\n});\n\nconst CustomizedSlider = styled(Slider)(\n  ({ theme }) => `\n  color: ${theme.palette.primary.main};\n\n  :hover {\n    color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n`,\n);\n\nexport default function StyledComponentsTheme() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <ThemeProvider theme={customTheme}>\n        <CustomizedSlider defaultValue={30} />\n      </ThemeProvider>\n    </Box>\n  );\n}\n"},"StyledComponentsDeep.js":{module:"./StyledComponentsDeep.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst CustomizedSlider = styled(Slider)`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n\n  & .MuiSlider-thumb {\n    border-radius: 1px;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <CustomizedSlider defaultValue={30} />\n    </Box>\n  );\n}\n",jsxPreview:"<Slider defaultValue={30} />\n<CustomizedSlider defaultValue={30} />",moduleTS:"./StyledComponentsDeep.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst CustomizedSlider = styled(Slider)`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n\n  & .MuiSlider-thumb {\n    border-radius: 1px;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <CustomizedSlider defaultValue={30} />\n    </Box>\n  );\n}\n"},"StyledComponentsPortal.js":{module:"./StyledComponentsPortal.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst StyledTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))`\n  & .MuiTooltip-tooltip {\n    background: navy;\n  }\n`;\n\nexport default function StyledComponentsPortal() {\n  return (\n    <StyledTooltip title=\"I am navy\">\n      <Button variant=\"contained\" color=\"primary\">\n        Styled tooltip\n      </Button>\n    </StyledTooltip>\n  );\n}\n",jsxPreview:'<StyledTooltip title="I am navy">\n  <Button variant="contained" color="primary">\n    Styled tooltip\n  </Button>\n</StyledTooltip>',moduleTS:"./StyledComponentsPortal.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Tooltip, { TooltipProps } from '@mui/material/Tooltip';\n\nconst StyledTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))`\n  & .MuiTooltip-tooltip {\n    background: navy;\n  }\n`;\n\nexport default function StyledComponentsPortal() {\n  return (\n    <StyledTooltip title=\"I am navy\">\n      <Button variant=\"contained\" color=\"primary\">\n        Styled tooltip\n      </Button>\n    </StyledTooltip>\n  );\n}\n"},"StyledComponents.js":{module:"./StyledComponents.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst SliderCustomized = styled(Slider)`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <SliderCustomized defaultValue={30} />\n    </Box>\n  );\n}\n",jsxPreview:"<Slider defaultValue={30} />\n<SliderCustomized defaultValue={30} />",moduleTS:"./StyledComponents.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nconst SliderCustomized = styled(Slider)`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <SliderCustomized defaultValue={30} />\n    </Box>\n  );\n}\n"},"EmotionCSS.js":{module:"./EmotionCSS.js",raw:"/* eslint-disable react/react-in-jsx-scope -- Unaware of jsxImportSource */\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nexport default function EmotionCSS() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <Slider\n        defaultValue={30}\n        css={css`\n          color: #20b2aa;\n\n          :hover {\n            color: #2e8b57;\n          }\n        `}\n      />\n    </Box>\n  );\n}\n",jsxPreview:"<Slider defaultValue={30} />\n<Slider\n  defaultValue={30}\n  css={css`\n    color: #20b2aa;\n\n    :hover {\n      color: #2e8b57;\n    }\n  `}\n/>",moduleTS:"./EmotionCSS.js",rawTS:"/* eslint-disable react/react-in-jsx-scope -- Unaware of jsxImportSource */\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Slider from '@mui/material/Slider';\nimport Box from '@mui/material/Box';\n\nexport default function EmotionCSS() {\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider defaultValue={30} />\n      <Slider\n        defaultValue={30}\n        css={css`\n          color: #20b2aa;\n\n          :hover {\n            color: #2e8b57;\n          }\n        `}\n      />\n    </Box>\n  );\n}\n"}};K.scope={process:{},import:{react:g,"@mui/material/styles":v,"@mui/material/Slider":C,"@mui/material/Box":b,"@mui/material/Button":x,"@mui/material/Tooltip":w,"@emotion/react":S}};var q={"./StyledComponentsTheme.js":function(){return(0,Z.jsx)(I.Z,{sx:{width:300},children:e||(e=(0,Z.jsx)(P.Z,{theme:R,children:(0,Z.jsx)(A,{defaultValue:30})}))})},"./StyledComponentsDeep.js":function(){return(0,Z.jsxs)(I.Z,{sx:{width:300},children:[o||(o=(0,Z.jsx)(B.ZP,{defaultValue:30})),p||(p=(0,Z.jsx)(V,{defaultValue:30}))]})},"./StyledComponentsPortal.js":function(){return l||(l=(0,Z.jsx)(z,{title:"I am navy",children:(0,Z.jsx)(U.Z,{variant:"contained",color:"primary",children:"Styled tooltip"})}))},"./StyledComponents.js":function(){return(0,Z.jsxs)(I.Z,{sx:{width:300},children:[r||(r=(0,Z.jsx)(B.ZP,{defaultValue:30})),u||(u=(0,Z.jsx)(F,{defaultValue:30}))]})},"./EmotionCSS.js":function(){var n,s,a;return n=I.Z,s={sx:{width:300},children:[d||(d=_(B.ZP,{defaultValue:30})),_(B.ZP,{defaultValue:30,css:(0,S.css)(k||(k=(0,E.Z)(["\n          color: #20b2aa;\n\n          :hover {\n            color: #2e8b57;\n          }\n        "])))})]},L.h.call(s,"css")?Z.jsxs(L.E,(0,L.c)(n,s),a):Z.jsxs(n,s,a)}},O={};function G(){return(0,Z.jsx)(f.Z,(0,y.Z)({},m))}},470057:function(n,s,a){"use strict";a.d(s,{Z:function(){return C}});var e,t=a(41732),o=a(192379),p=a(639519),c=a.n(p),l=a(291076),i=a(481835),r=a(148912),u=a(292802),d=a(999574),k=a(544602),m=a(678979),y=a(58329),h=a(241484),g=a(950941),f=a(200651);function v(n){var s=n.mode,a=(0,r.tv)().setMode;return o.useEffect(function(){a(s)},[s,a]),null}function C(n){var s=(0,i.Z)(),a=(0,l.useRouter)(),p=(0,d.ln)(a.asPath).canonicalAs,c=n.disableAd,C=void 0!==c&&c,b=n.disableToc,x=n.disableCssVarsProvider,w=n.demos,S=void 0===w?{}:w,M=n.docs,j=n.demoComponents,T=n.srcComponents,P=M[(0,m.useUserLanguage)()]||M.en,B=p.startsWith("/joy-ui/")&&!(void 0!==x&&x),I=B?r.lL:o.Fragment,Z=B?y.BrandingProvider:o.Fragment,R=(0,t.Z)({},B&&{mode:s.palette.mode});return(0,f.jsxs)(k.Z,{cardOptions:{description:P.headers.cardDescription,title:P.headers.cardTitle},description:P.description,disableAd:C,disableToc:void 0!==b&&b,location:P.location,title:P.title,toc:P.toc,children:[C?null:e||(e=(0,f.jsx)(y.BrandingProvider,{children:(0,f.jsx)(g.Z,{children:(0,f.jsx)(h.ZP,{})})})),(0,f.jsxs)(I,{children:[B&&(0,f.jsx)(v,{mode:s.palette.mode}),P.rendered.map(function(n,a){return(0,f.jsx)(u.Z,{demoComponents:j,demos:S,disableAd:C,localizedDoc:P,renderedMarkdownOrDemo:n,srcComponents:T,theme:s,WrapperComponent:Z,wrapperProps:R},"demos-section-".concat(a))})]})]})}v.propTypes={mode:c().oneOf(["light","dark"])}},881189:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/integrations/interoperability",function(){return a(436299)}])},884835:function(n,s,a){"use strict";var e=a(311596);function t(){}function o(){}o.resetWarningCache=t,n.exports=function(){function n(n,s,a,t,o,p){if(p!==e){var c=Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function s(){return n}n.isRequired=n;var a={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:o,resetWarningCache:t};return a.PropTypes=a,a}},639519:function(n,s,a){n.exports=a(884835)()},311596:function(n){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},function(n){n.O(0,[49774,56525,50014,60571,97146,4730,24184,17376,68874,8817,30816,95218,7704,85825,65154,35812,28849,68430,70186,99728,7733,61575,75363,45393,57614,13794,26074,34286,92802,76268,92888,40179],function(){return n(n.s=881189)}),_N_E=n.O()}]);